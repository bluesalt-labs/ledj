{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 1ebf281b67aaf05b768d","webpack:///./src/app.js","webpack:///./src/ledj.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;AC7DA;;;;;;;ACAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,cAAc,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA,qIAAqI;AACrI,iGAAiG,wBAAwB;AACzH;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,+FAA+F;AAC/F;AACA,yBAAyB,EAAE;AAC3B;AACA,gJAAgJ;AAChJ,gHAAgH;AAChH;AACA,6BAA6B,EAAE;AAC/B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,iCAAiC,EAAE;AACpE;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,8BAA8B;AACpF,8BAA8B,UAAU;AACxC;AACA;AACA,mDAAmD,2BAA2B;AAC9E,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yCAAyC,8BAA8B;AACvE,0BAA0B,kBAAkB;AAC5C;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yDAAyD,kCAAkC;AAC3F,0BAA0B,yCAAyC;AACnE,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,yFAAyF,yCAAyC;AAClI,0BAA0B,0DAA0D;AACpF,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qDAAqD,8DAA8D;AACnH;AACA;AACA,uDAAuD,iEAAiE;AACxH;AACA;AACA;AACA,sDAAsD,sDAAsD;AAC5G;AACA;AACA;AACA,sDAAsD;AACtD,0DAA0D,4BAA4B;AACtF;AACA;AACA;AACA,wDAAwD,4BAA4B;AACpF;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb,gCAAgC;AAChC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC;AACvC;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC,U","file":"ledj.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ledj\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ledj\"] = factory();\n\telse\n\t\troot[\"ledj\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1ebf281b67aaf05b768d","import Ledj from './ledj.js'\nimport style from './ledj.css'\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app.js\n// module id = 0\n// module chunks = 0","(function(window){\n    'use strict';\n    function define_ledj() {\n        var Ledj = {};\n\n        Ledj.cache = {\n            jsonConfig: [],\n            jsonData:   [],\n            jsonUrl:    [],\n            elementID:  [],\n            curCacheID: -1,\n            tagTemplateUsed: false\n        };\n\n        // todo: I could set each Ledj.defaults.foo to Ledj.foo and have functions that\n        // todo: set the default on init. Then either the loaded config or just Ledj.foo = bar changes the setting.\n        Ledj.defaults = {\n            sortDataBy:         'title',\n            dateFormat:         'mm/dd/yyyy',\n            selectMultipleTags: true\n        };\n\n        // todo: If I stored all the class and ID names in a config object,\n        // todo: I could add functionality to change those class/ID names.\n\n        Ledj.templates = {\n            parent: _.template(\n                '<div class=\"ledj-container\" id=\"ledj-container-<%= cacheID %>\">' +\n                    '<% if(title) { print(title); } %>' +\n                    '<%= childHTML %>' +\n                '</div>'\n            ),\n            linkGrid: _.template(\n                '<div class=\"ledj-link-grid\">' +\n                '<% (objectKey ? Ledj.cache.jsonData[cacheID][objectKey] : Ledj.cache.jsonData[cacheID]).forEach(function(dataItem) { %>' +\n                    '<a class=\"link-grid-item\" href=\"<%= dataItem[itemHrefKey] %>\"<% if(newTab) { %> target=\"_blank\" <% } %>>' +\n                        '<img src=\"<%= Ledj.getImageUrl(dataItem[itemImageKey], cacheID, objectKey) %>\" title=\"<%= dataItem[itemTitleKey] %>\" />' +\n                        '<span><%= dataItem[itemTitleKey] %></span>' +\n                    '</a><% }); %>' +\n                '</div>'\n            ),\n            table: _.template(\n                '<table class=\"ledj-table\">' +\n                    '<thead><tr>' +\n                    '<% _.forEach(Ledj.cache.jsonConfig[cacheID].headers, function(colConfig) { %>' +\n                        '<th><%= colConfig.name %></th>' +\n                    '<% }); %>' +\n                    '</tr></thead>' +\n                    '<tbody><% (objectKey ? Ledj.cache.jsonData[cacheID][objectKey] : Ledj.cache.jsonData[cacheID]).forEach(function(dataItem) { %>' +\n                        '<tr><% _.forEach(Ledj.cache.jsonConfig[cacheID].headers, function(colConfig, colName) { %>' +\n                            '<td><%= Ledj.getCellContent(colConfig, colName, dataItem) %></td>' +\n                        '<% }); %></tr>' +\n                    '<% }); %></tbody>' +\n                '</table>'\n            ),\n            gifGrid: _.template(\n                //'<div class=\"ledj-gif-grid\">' +\n                '<code>#todo</code>' // +\n                //'</div>'\n            ),\n            data: {\n                url:        _.template('<a href=\"<%= href %>\" target=\"_blank\"><%= text %></a>'),\n                image:      _.template(  // todo: make this less confusing/weird.\n                    '<img class=\"image\" src=\"<%= Ledj.getImageUrl(src, cacheID, objectKey) %>\"' +\n                    '<% if(alt) { print(\\' alt=\"\\' + alt + \\'\"\\'); } %> />'\n                ),\n                date:       _.template('<span class=\"date\"><%= Ledj.formatDateString(date, dateFormat) %></span>'),\n                string:     _.template('<span class=\"string\"><%= text %></span>'),\n                tagArray:   _.template(\n                    '<div class=\"tag-container\">' +\n                    '<% _.forEach(tags, function(tag) { %>' +\n                        '<span class=\"tag <%= Ledj.nameToID(tag) %>\"><%= tag %></span>' +\n                    '<% }); %>' +\n                    '</div>'\n                )\n            }\n        };\n\n        /*\n        Checks if a specified URL gives a status of 200\n         */\n        Ledj.urlExists = function(url, callbackSuccess, callbackFail, callbackArg) {\n            var http = new XMLHttpRequest();\n            http.open('HEAD', url);\n            http.onreadystatechange = function() {\n                if (this.readyState === this.DONE) {\n                    if (this.status === 200) {\n                        if(callbackSuccess !== null) { callbackSuccess(callbackArg); }\n                        else { return 0; }\n                    }\n                    else {\n                        if(callbackFail !== null) { callbackFail(callbackArg); }\n                        else { return -1; }\n                    }\n                }\n            };\n            http.send();\n        };\n\n        Ledj.reset = function(cacheID) {\n            resetElement(Ledj.cache.elementID[cacheID]);\n        };\n\n        Ledj.getJSONConfig = function(url, callback) {\n            if(typeof url === 'string'){\n\n                // Add date param to force clearing the browser cache\n                url += '?dt=' + Date.now();\n\n                var xhr = new XMLHttpRequest();\n                xhr.open('GET', url, true);\n                xhr.responseType = 'json';\n                xhr.onload = function() {\n                    var status = xhr.status;\n                    if (status === 200) { callback(null, xhr.response); }\n                    else { callback(status); }\n                };\n                xhr.send();\n            } else {\n                callback('[url] must be a string.');\n            }\n        };\n\n        Ledj.getHostName = function() {\n            return window.location.protocol + \"//\" + window.location.hostname + (window.location.port ? ':' + window.location.port: '');\n        };\n\n        Ledj.capitalize = function(string) {\n            return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n        };\n\n        Ledj.nameToID = function(name) {\n            return name.replace(/\\\\s/g, \"-\").toLowerCase();\n        };\n\n        Ledj.formatDateString = function(dateString, dateFormat) {\n            // if the moment library is available, use that to format the string.\n            if(!!window.moment) {\n                var date = moment(dateString);\n                var dateFormat = (dateFormat ? dateFormat : Ledj.defaults.dateFormat);\n                return date.format(dateFormat);\n            } else {\n                var d = new Date(dateString);\n                return d.getMonth() + '/' + d.getDate() + '/' + d.getFullYear();\n            }\n        };\n\n        // Click Event Listener for tag elements (see Ledj.templates.data.tagArray template)\n        Ledj.toggleActiveTagsByClassName = function(e) {\n            var tagClass = e.target.className.replace('tag', '').replace('active', '').trim();\n\n            if(Ledj.defaults.selectMultipleTags) {\n                _.map(document.getElementsByClassName(tagClass), function(el) {\n                    if(el.className.includes('active')) { el.className = 'tag ' + tagClass; }\n                    else { el.className = 'tag active ' + tagClass; }\n                });\n            } else {\n                _.map(document.getElementsByClassName('tag'), function(el) {\n                    var classNames = el.className.split(' ');\n                    if(classNames.includes(tagClass) && !classNames.includes('active')) { el.className = 'tag active ' + tagClass; }\n                    else { el.className = el.className.replace('active', '').trim(); }\n                });\n            }\n        };\n        // Adds click event listener for tag elements (see Ledj.templates.data.tagArray template)\n        // todo: attach this to the tags' parent div and modify the click event\n        Ledj.addTagClickListeners = function() {\n            _.map(document.getElementsByClassName('tag'), function(el) {\n                el.addEventListener(\"click\", Ledj.toggleActiveTagsByClassName);\n            });\n        };\n        // Removes click event listener for tag elements (see Ledj.templates.data.tagArray template)\n        // todo: attach this to the tags' parent div and modify the click event\n        Ledj.removeTagClickListeners = function() {\n            _.map(document.getElementsByClassName('tag'), function(el) {\n                el.removeEventListener(\"click\", Ledj.toggleActiveTagsByClassName);\n            });\n        };\n\n        // todo: make this function more generic somehow ( getHtmlByDataType() )\n        Ledj.getCellContent = function(colConfig, colName, itemData) {\n            var cell = '';\n\n            switch(colConfig.type.toLowerCase()) {\n                case \"url\":\n                    cell += Ledj.templates.data.url({ 'text': itemData[colName], 'href': itemData[colConfig.href] });\n                    break;\n                case \"image\":\n                    cell += Ledj.templates.data.image({ 'src': itemData[colConfig.src], 'alt': itemData[colConfig.alt] });\n                    break;\n                case \"date\":\n                    var dateFormat = (colConfig.hasOwnProperty('dateFormat') ? colConfig.dateFormat : null);\n                    cell += Ledj.templates.data.date({ 'date': itemData[colName], 'dateFormat': dateFormat });\n                    break;\n                case \"tag-array\":\n                case \"tagarray\":\n                    Ledj.cache.tagTemplateUsed = true; // we're using the tag template, so attach click event listeners\n                    cell += Ledj.templates.data.tagArray({ 'tags': itemData[colName] });\n                    break;\n                case \"string\":\n                default:\n                    cell += Ledj.templates.data.string({ 'text': itemData[colName] });\n                    break;\n            }\n            return cell;\n        };\n\n        Ledj.getImageUrl = function(imageTitle, cacheID, objectKey) {\n            var srcDir = '/';\n            var ext = (Ledj.cache.jsonConfig[cacheID].hasOwnProperty('imgExt') ? Ledj.cache.jsonConfig[cacheID].imgExt : '');\n\n            if(Ledj.cache.jsonConfig[cacheID].hasOwnProperty('srcDir')) {\n                srcDir = Ledj.cache.jsonConfig[cacheID].srcDir;\n            }\n\n            else if(Ledj.cache.jsonConfig[cacheID].hasOwnProperty('srcDirs')) {\n                if(!!objectKey && Ledj.cache.jsonConfig[cacheID].srcDirs.hasOwnProperty(objectKey)) {\n                    srcDir = Ledj.cache.jsonConfig[cacheID].srcDirs[objectKey];\n                }\n                else if(Ledj.cache.jsonConfig[cacheID].srcDirs.hasOwnProperty('Default')) {\n                    srcDir = Ledj.cache.jsonConfig[cacheID].srcDirs['Default'];\n                }\n                else if(Ledj.cache.jsonConfig[cacheID].srcDirs.hasOwnProperty('default')) {\n                    srcDir = Ledj.cache.jsonConfig[cacheID].srcDirs['default'];\n                }\n            }\n\n            return srcDir + imageTitle + ext;\n        };\n\n\n        /* Private Helper Functions */\n\n        function loadConfigFromUrl(url, callback) {\n            Ledj.getJSONConfig(url, function(err, data) {\n                if(err === null) {\n                    if (data.hasOwnProperty('config') && data.hasOwnProperty('data')) {\n                        Ledj.cache.curCacheID = Ledj.cache.jsonConfig.push(data.config) - 1;\n                        Ledj.cache.jsonData[Ledj.cache.curCacheID] = data.data;\n                        Ledj.cache.jsonUrl[Ledj.cache.curCacheID] = url;\n\n                        callback(Ledj.cache.curCacheID);\n                    } else {\n                        err = 'JSON data must have `config` and `data` properties.';\n                    }\n                }\n\n               if(err !== null) {\n                   console.warn('Config file \"' + url + '\" could not be retrieved. ' + err);\n               }\n            });\n        }\n\n        function loadConfigFromObj(data, callback) {\n            if (data.hasOwnProperty('config') && data.hasOwnProperty('data')) {\n                Ledj.cache.curCacheID = Ledj.cache.jsonConfig.push(data.config) - 1;\n                Ledj.cache.jsonData[Ledj.cache.curCacheID] = data.data;\n\n                callback(Ledj.cache.curCacheID);\n            } else {\n                console.warn('Config object must have `config` and `data` properties.');\n            }\n        }\n\n        function sortJsonDataBy(cacheID, propName) {\n            if(Ledj.cache.jsonData[cacheID]) {\n                if( Array.isArray(Ledj.cache.jsonData[cacheID]) ) {\n                    Ledj.cache.jsonData[cacheID] =\n                        _.sortBy(\n                            Ledj.cache.jsonData[cacheID],\n                            (typeof propName === 'string' ? propName.toLowerCase() : propName)\n                        );\n                }\n\n                else if(typeof Ledj.cache.jsonData[cacheID] === 'object') {\n                    for(var item in Ledj.cache.jsonData[cacheID]) {\n                        Ledj.cache.jsonData[cacheID][item] =\n                            _.sortBy(\n                                Ledj.cache.jsonData[cacheID][item],\n                                (typeof propName === 'string' ? propName.toLowerCase() : propName)\n                            );\n                    }\n                }\n\n                else {\n                    console.warn('Could not sort cache.jsonData[' + cacheID + ']');\n                }\n            } else {\n                console.warn('from Ledj.sortJsonDataBy(): `cache.jsonData[' + cacheID + ']` does not exist.');\n            }\n        }\n\n        function sortData(cacheID) {\n            sortJsonDataBy(cacheID, Ledj.defaults.sortDataBy);\n        }\n\n        function getLinkGridFromData(cacheID, objectKey) {\n            var templateData = {\n                'cacheID': cacheID,\n                'objectKey': objectKey,\n                'itemHrefKey': 'href',      // todo set this in json config\n                'newTab': true,             // todo set this in json config\n                'itemImageKey': 'filename', // todo set this in json config\n                'itemTitleKey': 'title'     // todo set this in json config\n\n            };\n\n            return wrapHtmlInParent(Ledj.templates.linkGrid(templateData), cacheID, objectKey);\n        }\n\n        function getTableFromData(cacheID, objectKey) {\n            var templateData = {\n                'cacheID': cacheID,\n                'objectKey': objectKey\n            };\n\n            return wrapHtmlInParent(Ledj.templates.table(templateData), cacheID, objectKey);\n        }\n\n        function getGifGridFromData(cacheID, objectKey) {\n            var templateData = {\n                'cacheID': cacheID,\n                'objectKey': objectKey\n            };\n\n            return wrapHtmlInParent(Ledj.templates.gifGrid(templateData), cacheID, objectKey);\n        }\n\n        function wrapHtmlInParent(processedHTML, cacheID, objectKey) {\n            return Ledj.templates.parent({\n                'title': getElementTitle(cacheID, objectKey),\n                'cacheID': cacheID,\n                'childHTML': processedHTML\n            });\n        }\n\n        function addElementsTo(cacheID, elementID) {\n            var element = document.getElementById(elementID);\n\n            // Make sure the DOM element exists\n            if(!!element) {\n                // Store the valid elementID\n                Ledj.cache.elementID[cacheID] = elementID;\n\n                var functionToUse = null;\n\n                switch(Ledj.cache.jsonConfig[cacheID].type.toLowerCase()) {\n                    case 'link-grid':\n                    case 'linkgrid':\n                        functionToUse = getLinkGridFromData;\n                        break;\n                    case 'table':\n                        functionToUse = getTableFromData;\n                        break;\n                    case 'gif-grid':\n                    case 'gifgrid':\n                        functionToUse = getGifGridFromData;\n                        break;\n                    default:\n                        console.log('A fallback template is not yet implemented.');\n                }\n\n                if(!!functionToUse) {\n                    var toAppend = '';\n\n                    if( Array.isArray(Ledj.cache.jsonData[cacheID]) ) {\n                        toAppend = functionToUse(cacheID);\n                    }\n\n                    else if(typeof Ledj.cache.jsonData[cacheID] === 'object') {\n                        for(var item in Ledj.cache.jsonData[cacheID]) {\n                            toAppend += functionToUse(cacheID, item);\n                        }\n                    }\n\n                     else { // todo\n                        console.warn('Couldn\\'t find a template to use - Ledj shouldn\\'t get here');\n                    }\n\n                    if(toAppend !== '') {\n                        element.innerHTML += toAppend;\n\n                        // Add tag click event listener if tags were attached to the page\n                        if(Ledj.cache.tagTemplateUsed) {\n                            Ledj.removeTagClickListeners(); // prevents duplicate event listeners\n                            Ledj.addTagClickListeners();\n                        }\n                    }\n                } else {\n                    console.warn('A template could not be identified.');\n                }\n            } else {\n                console.warn('Element ' + (!!elementID ? '#' + elementID : '[undefined]') + ' does not exist.');\n            }\n        }\n\n        function getElementTitle(configID, objectKey) {\n            if(!!objectKey && objectKey !== '') {\n                var titleTag = 'h2';\n\n                if( Ledj.cache.jsonConfig[configID].hasOwnProperty('titleElementLevel') &&\n                    typeof parseInt(Ledj.cache.jsonConfig[configID].titleElementLevel) === 'number') {\n                    titleTag = 'h' + Ledj.cache.jsonConfig[configID].titleElementLevel;\n                }\n\n                return '<' + titleTag + ' class=\"ledj-title\">' + objectKey + '</' + titleTag + '>';\n            } // else\n\n            return null;\n        }\n\n        function resetElement(elementID) {\n            try {\n                document.getElementById(elementID).innerHTML = '';\n            } catch(e) {\n                console.warn(e); // debug?\n            }\n        }\n\n        /*\n        Callback for Ledj.loadAndAttachTo and Ledj.loadFromObjAndAttachTo.\n        Sorts, parses, and attaches data to the DOM.\n         */\n        function sortAndAttachCallback(cacheID, elementID) {\n            // reset this flag if a previous data set used the tag template.\n            Ledj.cache.tagTemplateUsed = false;\n            sortData(cacheID);\n            addElementsTo(cacheID, elementID);\n        }\n\n        /* End Private Helper Functions */\n\n        /*\n        Creates new HTML elements from specified JSON data URL\n        and attaches them to the specified DOM element.\n        This is the primary method for loading data and attaching elements.\n         */\n        Ledj.loadAndAttachTo = function(jsonUrl, elementID) {\n            loadConfigFromUrl(jsonUrl, function(cacheID) {\n                sortAndAttachCallback(cacheID, elementID);\n            });\n        };\n\n        /*\n         Creates new HTML elements from specified JSON data object\n         and attaches them to the specified DOM element.\n         */\n        Ledj.loadFromObjAndAttachTo = function(jsonData, elementID) {\n            loadConfigFromObj(jsonData, function(cacheID) {\n                sortData(cacheID);\n                addElementsTo(cacheID, elementID);\n            });\n        };\n\n        /*\n         If the specified cache ID exists, the associated element is cleared,\n         the data retrieved again, and the HTML elements re-added to that container.\n         */\n        Ledj.reloadFromUrlByID = function(cacheID) {\n            var numCacheID = parseInt(cacheID);\n\n            if(typeof numCacheID === 'number' && !!this.cache.jsonUrl[numCacheID] && !!this.cache.elementID[numCacheID]) {\n                this.reset(numCacheID); // todo: make sure this works.\n                this.loadAndAttachTo(this.cache.jsonUrl[numCacheID], this.cache.elementID[numCacheID]);\n            } else {\n                console.log('Could not reload: cacheID ' + cacheID + ' is invalid.');\n            }\n        };\n\n        /*\n         If the specified cache ID exists, the associated element is cleared,\n         the cached data is replaced with the specified data, and the HTML elements re-added to that container.\n         */\n        Ledj.reloadFromObjByID = function(jsonData, cacheID) {\n            var numCacheID = parseInt(cacheID);\n\n            if(typeof numCacheID === 'number' && !!this.cache.elementID[numCacheID]) {\n                this.reset(numCacheID);\n                this.loadFromObjAndAttachTo(jsonData, this.cache.elementID[numCacheID]);\n            } else {\n                console.log('Could not reload: cacheID ' + cacheID + ' is invalid.');\n            }\n        };\n\n        // Alias for Ledj.loadAndAttachTo\n        Ledj.attach = Ledj.loadAndAttachTo;\n        // Alias for Ledj.loadFromObjAndAttachTo\n        Ledj.attachWith = Ledj.loadFromObjAndAttachTo;\n        // Alias for Ledj.reloadFromUrlByID\n        Ledj.reload =  Ledj.reloadFromUrlByID;\n        // Alias for Ledj.reloadFromObjByID\n        Ledj.reloadwith = Ledj.reloadFromObjByID;\n\n        // Final Statement\n        return Ledj;\n    }\n\n    if(typeof(Ledj) === 'undefined') {\n        //export default 'Ledj';\n        window.Ledj = define_ledj();\n    } else {\n        console.log(\"Ledj is already defined.\");\n    }\n})(window);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/ledj.js\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}