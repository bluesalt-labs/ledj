<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="theme-color" content="#00131C">
    <link rel="icon" sizes="300x300" href="/docs/assets/images/ledj-icon.png">
    <title>Ledj.js | Local Testing</title>

    <!-- Stylesheets -->
    <link href="https://fonts.googleapis.com/css?family=Roboto:400,700|Roboto+Mono" rel="stylesheet" />
    <link href="../src/ledj.css" rel="stylesheet" />
    <link href="/docs/assets/docs-styles.css" rel="stylesheet" />

    <script type="text/javascript" src="/node_modules/lodash/lodash.js"></script>
    <script type="text/javascript" src="../src/ledj.js"></script>

    <script type="text/javascript">
        var ledjDocs = {
            config: {
                baseJsonUrl: '/docs/assets/data/'
            },
            // todo: these cacheID's should NOT be hard coded...
            data: {
                0: { baseName: 'grid-data',    cacheID: 0 },
                1: { baseName: 'table-data',   cacheID: 1 }
            },

            // Functions
            getJsonDataUrl: function(ledjID) {
                return this.config.baseJsonUrl + this.data[ledjID].baseName + '.json';
            },
            getContainerID: function(ledjID, type) {
                if(type === 'output' || type === 'json' || type === 'error') {
                    return this.data[ledjID].baseName + '-' + type;
                }
            },
            getContainer: function(ledjID, type) {
                var idName = this.getContainerID(ledjID, type);
                if(!!idName) {  return document.getElementById(idName);
                } else {        return null; }
            },
            showJsonParseError: function(ledjID, error) {
                var elError = this.getContainer(ledjID, 'error');
                elError.innerHTML = 'Invalid JSON: ' + error.message;
                elError.className = 'json-error show';
            },
            hideJsonParseError: function(ledjID) {
                var elError = this.getContainer(ledjID, 'error');
                elError.innerHTML = '';
                elError.className = 'json-error';
            },
            resetOutputFor: function(ledjID) {
                var elOutput = this.getContainer(ledjID, 'output');
                elOutput.innerHTML = '';
                Ledj.attach( this.getJsonDataUrl(ledjID), this.getContainerID(ledjID, 'output') );
            },
            resetJsonDataFor: function(ledjID) {
                var elJson = this.getContainer(ledjID, 'json');

                elJson.value = '';

                Ledj.getJSONConfig(this.getJsonDataUrl(ledjID), function(err, data) {
                    elJson.value = JSON.stringify(data, null, 2);
                });
            },
            reloadLedjFor: function(ledjID) {
                var jsonObj;
                try {
                    var elJson = this.getContainer(ledjID, 'json');
                    jsonObj = JSON.parse( elJson.value );
                } catch(e) {
                    console.log(e);
                    jsonObj = null;
                    this.showJsonParseError(ledjID, e);
                }

                if(!!jsonObj) {
                    this.hideJsonParseError(ledjID);

                    var elOutput = this.getContainer(ledjID, 'output');
                    elOutput.innerHTML = '';
                    Ledj.reloadwith(jsonObj, this.data[ledjID].cacheID);
                }
            },
            resetLedjFor: function(ledjID) {
                this.hideJsonParseError(ledjID);
                this.resetOutputFor(ledjID);
                this.resetJsonDataFor(ledjID);
            },

            initLedjExamples: function() {
                for(var i in this.data) {
                    this.resetLedjFor(i); // todo: we need to change this so that we get a cacheID from Ledj.
                }
            }
        };

        // Load the Ledj examples
        document.addEventListener("DOMContentLoaded", function() {
            ledjDocs.initLedjExamples();

            var textareas = document.getElementsByTagName('textarea');

            for(var i in textareas) {
                var el = document.getElementById(textareas[i].id);
                if(!!el) {
                    el.addEventListener("keydown", function(e) {
                        var keyCode = e.keyCode || e.which;
                        if(keyCode === 9) {
                            e.preventDefault();
                            // todo for some reason this is firing twice. only fire this once.
                            var start   = e.target.selectionStart;
                            var end     = e.target.selectionEnd;
                            e.target.value = e.target.value.substring(0, start) + '  ' + e.target.value.substring(end);
                            //e.target.focus();
                            e.target.setSelectionRange(end+1, end+1);
                        }
                    });
                }
            }

        });
    </script>
</head>
<body>

<div class="header">
    <div class="body-container">
        <img class="header-logo" src="/docs/assets/images/ledj.png" />
        <h1 class="header-title">Ledj.js</h1>

        <h2 class="sub-header-title">
            <strong>L</strong>oad <strong>E</strong>lements <strong>D</strong>ynamically from <strong>J</strong>SON
        </h2>
        <h3 class="sub-header-title">A JavaScript library that creates repeated HTML elements from a JSON file.</h3>
        <h3 class="sub-header-title">Created by BlueSalt Labs</h3>
    </div>
</div>

<div class="body-container">
    <h1>Getting Started</h1>
    <div>
        <code>#todo</code>
    </div>

    <hr />

    <h1>Examples</h1>

    <div class="example-container">
        <h2>Grid</h2>
        <div class="ledj-output-container" id="grid-data-output"></div>

        <h2>JSON Data</h2>
        <div class="json-data-container">
            <label class="sr-only" for="grid-data-json">Grid Data JSON</label>
            <textarea id="grid-data-json"></textarea>
            <button onclick="ledjDocs.reloadLedjFor(0);">Reload</button>
            <button class="reset" onclick="ledjDocs.resetLedjFor(0);">Reset</button>
            <span class="json-error" id="grid-data-error"></span>
        </div>
    </div>
    <hr />

    <div class="example-container">
        <h1>Table Example</h1>
        <div class="ledj-output-container" id="table-data-output"><code>#todo</code></div>

        <h2>JSON Data</h2>
        <div class="json-data-container">
            <label class="sr-only" for="table-data-json">Table Data JSON</label>
            <textarea id="table-data-json"></textarea>
            <button onclick="ledjDocs.reloadLedjFor(1);">Reload</button>
            <button class="reset" onclick="ledjDocs.resetLedjFor(1);">Reset</button>
            <span class="json-error" id="table-data-error"></span>
        </div>
    </div>
</div>

</body>
</html>